<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c on A Developer&#39;s Note</title>
    <link>https://seokbeomKim.github.io/categories/c/</link>
    <description>Recent content in c on A Developer&#39;s Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Mar 2020 00:54:01 +0900</lastBuildDate>
    
	<atom:link href="https://seokbeomKim.github.io/categories/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C ARRAY_SIZE 매크로와 포인터 기초</title>
      <link>https://seokbeomKim.github.io/posts/c-arraysize-macro/</link>
      <pubDate>Sat, 28 Mar 2020 00:54:01 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/c-arraysize-macro/</guid>
      <description>개요 칩 검증 코드를 수정하기 위해 간단한 루틴을 작성하고 있던 도중 커널에서 제공하는 ARRAY_SIZE 매크로가 의도한대로 동작하지 않아 살펴보기 시작했다. 그러던 도중 https://kldp.org/node/34268과 같은 원인이라는 것을 알게되고 C 기초를 또 다시 한번 공부하게 되었다.
커널에서 사용하는 ARRAY_SIZE는 아래와 같이 구현되어 있다.
#define ARRAY_SIZE(x) (sizeof(x)/sizeof(x[0]))  // examples for (idx = 0; idx &amp;lt; ARRAY_SIZE(pArr); idx++) { // do something }) 본래 의도한대로라면, 배열의 크기만큼 for 구문을 반복해서 수행해야 하지만, pArr 자체가 함수의 인자로써 전달된 것이라면 얘기가 달라진다.</description>
    </item>
    
    <item>
      <title>goto statement</title>
      <link>https://seokbeomKim.github.io/posts/goto-statement/</link>
      <pubDate>Wed, 25 Mar 2020 00:47:49 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/goto-statement/</guid>
      <description>개요 학부 시절 c언어를 배울 때 &amp;lsquo;goto&amp;rsquo; 문을 사용하는 것을 터부시할 정도로 절대 사용하면 안되는 문법으로 배웠다. 그 이유는 자세하게 알려주지 않았지만 되도록이면 goto 를 사용하지 않고 분기나 객체를 이용하도록 코딩을 했었고 저학년에서 고학년으로 올라갈수록 c언어 대신 자바나 c++, c# 등을 배우면서 goto는 머릿속에서 잊혀져갔다.
입사하고 나서 드라이버 코드를 보니 간간히 goto 문이 사용된 것들을 보고 이것이 과연 리팩토링을 해야하는 대상인가에 대해 잠시 생각해보았다. 만약 아래와 같이 코드가 진행될 경우, 반드시 나머지 코드를 분기문으로 처리해야할 필요가 있을까?</description>
    </item>
    
    <item>
      <title>switch 구문과 if-else 구문</title>
      <link>https://seokbeomKim.github.io/posts/switch-statement/</link>
      <pubDate>Wed, 26 Feb 2020 23:56:18 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/switch-statement/</guid>
      <description>개요 실행 시간 단축을 위해 어떤 방법이 가능할지 고민하던 중 아래와 같은 case 구문을 보았다.
int switch_example(unsigned int flag) { switch (flag) { case FLAG_A: // do A 	break; case FLAG_B: // do B 	break; case blabla: // blabla... 	break; default: printk(KERN_ERR &amp;#34;ERROR!\n&amp;#34;); } return 0; } 함수 포인터 배열 사용하기 if-else 를 사용하지 않고 굳이 switch 문을 사용하는 이유가 있을까? 학부 시절, switch문은 되도록 지양하고 if-else를 사용해야 한다는 얘기를 들었던 기억이 났다.</description>
    </item>
    
  </channel>
</rss>
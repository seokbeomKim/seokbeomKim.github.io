<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Embedded on A Developer&#39;s Note</title>
    <link>https://seokbeomKim.github.io/categories/embedded/</link>
    <description>Recent content in Embedded on A Developer&#39;s Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Dec 2020 01:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://seokbeomKim.github.io/categories/embedded/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WSL 가상 디스크 파일 D 드라이브에 옮기기</title>
      <link>https://seokbeomKim.github.io/posts/wsl-move-to-d/</link>
      <pubDate>Wed, 23 Dec 2020 01:00:00 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/wsl-move-to-d/</guid>
      <description>lxrunoffline WSL 을 사용하다 보면 디스크 용량이 커져 C 드라이브의 용량이 부족해진다. 용량이 넉넉하면 문제가 없겠지만 필자와 같이 C 드라이브는 O/S만 설치하고 D 드라이브에 다른 것들을 모두 설치하도록 환경을 설정한 경우에는 이러한 저장 방식은 꽤 부담스러워진다. 예전에는 이러한 문제에 대해 해결 방법이 따로 없었던 것으로 알고 있었는데 찾아보니 lxrunoffline이라는 툴로 간단하게 해결할 수 있었다.
윈도우즈 패키지 매니저인 choco 를 이용하여 lxrunoffline을 설치하고 이를 이용하여 WSL에 사용되는 가상 디스크 파일을 다른 드라이브로 옮길 수 있다.</description>
    </item>
    
    <item>
      <title>PLL (Phase Locked Loop)</title>
      <link>https://seokbeomKim.github.io/posts/pll-and-pms/</link>
      <pubDate>Tue, 08 Dec 2020 15:04:30 +0000</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/pll-and-pms/</guid>
      <description>개요 업무 상에서 클럭 소스를 컨트롤 하기 위해 사용되는 것이 바로 PLL (Phase Locked Loop) 이다. 회로를 통해서 일정한 주파수를 생섬해주는 역할을 한다. 현업에서는 PLL 설정을 위한 값으로 PMS 를 사용하지만 출처에 따르면 M/N 이라는 기호로 나타낸 것을 알 수 있다.
PLL 회로 사용 예 아래 회로는 10 MHz 클럭 소스를 이용하여 100 MHz Fout 을 만들어내는 PLL 회로이다.
TCXO 는 심장과 같이 10 MHz 짜리 클럭 소스로 PLL 에 넣어준다.</description>
    </item>
    
    <item>
      <title>WSL 리소스 조정하기</title>
      <link>https://seokbeomKim.github.io/posts/wsl-customize-resource/</link>
      <pubDate>Sat, 28 Nov 2020 23:00:00 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/wsl-customize-resource/</guid>
      <description>개요 커널 분석을 위해 WSL을 이용하도록 환경을 구성하자 서브시스템에서 사용하는 메모리나 CPU 자원이 상당하였다. 16기가 램 중에 무려 12기가를 사용하는 일이 비일비재했다. Vmmem 이라는 프로세스로 엄청난 리소스가 소모되고 있었고 이러한 내용은 다른 블로그에서도 동일하게 재현되고 있었다.
위 블로그에 나와있는 이 문제에 대한 해결법은 간단하다. 아래와 같이 WSL 설정파일을 하나 생성해서 사용할 리소스를 직접 명시해주면 된다.
WSL 리소스 설정 먼저, 실행 중인 WSL을 확인한 후 아래와 같이 종료한다.
PS C:\Windows\system32&amp;gt; wsl -l -v NAME STATE VERSION * Ubuntu Running 2 PS C:\Windows\system32&amp;gt; wsl -t Ubuntu --shutdown PS C:\Windows\system32&amp;gt; PS C:\Windows\system32&amp;gt; wsl -l -v NAME STATE VERSION * Ubuntu Stopped 2 종료한 후에는 아래 경로에 새 파일을 만들어주고 아래와 같이 작성해주자.</description>
    </item>
    
    <item>
      <title>부트로더(Bootloader)</title>
      <link>https://seokbeomKim.github.io/posts/bootloader/</link>
      <pubDate>Sun, 23 Jun 2019 22:47:44 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/bootloader/</guid>
      <description>이 포스팅의 내용은 임베디드 리눅스에서의 부트로더 역할에 대해 중점적으로 다룬다. 부트로더는 시스템을 초기화하고 임베디드 운영체제를 탑재하거나 실행하기 위해서 시스템 초기화 코드, 하드웨어 제어 프로그램, 네트워크, USB 등의 프로토콜과 일부 파일 시스템을 관리한다.
브투로더는 개인용 컴퓨터의 BIOS(Basic Input Output System)와 유사하다고 생각하면 된다. BIOS는 처음 전원을 공급하면 메인보드의 CMOS에 저장된 설정값을 읽어서 하드웨어를 초기화하고 그래픽 카드 정보 및 바이오스 정보를 출력한 다음 POST(Power-On Self Test) 과정을 수행하고 하드디스크나 CD-ROM 또는 플로피디스크에서 운영체제를 찾아 부팅한다.</description>
    </item>
    
    <item>
      <title>QEMU 이용한 임베디드 개발 환경 구축하기</title>
      <link>https://seokbeomKim.github.io/posts/qemu-arm-versatile/</link>
      <pubDate>Sat, 22 Jun 2019 21:29:27 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/qemu-arm-versatile/</guid>
      <description>임베디드 분야로 공부를 하기 위해 보드를 구매하였지만, 보드 없이도 가상으로 개발하는 방법은 없을까 고민하던 중 QEMU를 이용하는 방법을 찾게 되었다. 특정 프로세서에 대한 에뮬레티어 기능을 이용해 단순 커널 분석을 위해 사용할 수 있을 뿐만 아니라, machine 자체도 에뮬레이팅이 가능하기 때문에 임베디드 쪽으로도 많이 사용된다고 한다.
개발 환경 구축을 위해서는 리눅스가 필수인데 필자는 여건상 어쩔 수 없이 맥에서 리눅스 도커 이미지를 사용하는 방식으로 하여 크로스 빌드는 컨테이너에서, 빌드된 이미지는 호스트인 맥에서 실행하는 방식으로 진행하였다.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Science on Sukbeom Kim</title>
    <link>/categories/computer-science/</link>
    <description>Recent content in Computer Science on Sukbeom Kim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 May 2022 01:37:45 +0900</lastBuildDate>
    <atom:link href="/categories/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Device Tree Overlay</title>
      <link>/posts/device-tree-overlay/</link>
      <pubDate>Sun, 08 May 2022 01:37:45 +0900</pubDate>
      <guid>/posts/device-tree-overlay/</guid>
      <description>Ramoops 덕분에 알게된 오버레이 🔗며칠전 리눅스에서의 Tracing 방법에 대해 공부하다가 찾아낸 세미나 영상에서 ramoops 라는 것을 알게 되었다. ramoops는 커널이 oops/panic 이 발생하면</description>
    </item>
    <item>
      <title>Stack Protector와 디버깅 이야기</title>
      <link>/posts/stack-protector%EC%99%80-%EB%94%94%EB%B2%84%EA%B9%85-%EC%9D%B4%EC%95%BC%EA%B8%B0/</link>
      <pubDate>Thu, 03 Feb 2022 15:00:45 +0900</pubDate>
      <guid>/posts/stack-protector%EC%99%80-%EB%94%94%EB%B2%84%EA%B9%85-%EC%9D%B4%EC%95%BC%EA%B8%B0/</guid>
      <description>Stack Protector, 넌 뭐하는 놈이냐? 🔗현업에서 커널의 CONFIG_STACK_PROTECTOR 를 활성화하면 커널 부트가 안된다는 이슈가 보고되었다. Trace32 로 callstack을 살펴보니 내 파트에서 맡고 있는 디바</description>
    </item>
    <item>
      <title>V4L2 Memory Type</title>
      <link>/posts/v4l2-memory-type/</link>
      <pubDate>Sun, 18 Apr 2021 00:32:27 +0900</pubDate>
      <guid>/posts/v4l2-memory-type/</guid>
      <description>개요 🔗최근 Capture 디바이스 드라이버 코드의 V4L2 표준화 작업을 위해 한 가지 업무를 할당 받았다. 거의 일주일 동안 헤매었는데 다른 선임 개발자가 몇 시간 만에 코드를 수정하니</description>
    </item>
    <item>
      <title>Little Endian vs. Big Endian</title>
      <link>/posts/little-endian-vs.-big-endian/</link>
      <pubDate>Mon, 27 Jan 2020 22:27:06 +0900</pubDate>
      <guid>/posts/little-endian-vs.-big-endian/</guid>
      <description>개요 🔗빅 엔디안과 리틀 엔디안에 관해 업무에서 접할 수 있는 상황과 각각에 해당하는 포인터 연산 예제를 종합적으로 정리하도록 한다. 엔디안(Endianness</description>
    </item>
    <item>
      <title>색 공간(Color Space)</title>
      <link>/posts/%EC%83%89-%EA%B3%B5%EA%B0%84color-space/</link>
      <pubDate>Sun, 26 Jan 2020 16:39:36 +0900</pubDate>
      <guid>/posts/%EC%83%89-%EA%B3%B5%EA%B0%84color-space/</guid>
      <description>색 공간 포맷 🔗업무 상에 사용되는 일반적인 색 인코딩 시스템은 RGB 와 YUV 이다. 그 중에서도 SoC의 각 컴포넌트에서 이미지 처리를 위해 기본으로 요구하는 포맷은 YUV 이다</description>
    </item>
    <item>
      <title>지피(Jiffies)</title>
      <link>/posts/%EC%A7%80%ED%94%BCjiffies/</link>
      <pubDate>Sun, 26 May 2019 10:38:40 +0900</pubDate>
      <guid>/posts/%EC%A7%80%ED%94%BCjiffies/</guid>
      <description>오랜만에 지피에 대한 포스팅을 다시 작성한다(대학생 때 커널 공부를 한 뒤로 이렇게 별도로 문서를 작성하는 것은 처음인 것 같다). 전역 변수인 jiffies에는 시</description>
    </item>
  </channel>
</rss>

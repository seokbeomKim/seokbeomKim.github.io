<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cache-line on A Developer&#39;s Note</title>
    <link>https://seokbeomKim.github.io/tags/cache-line/</link>
    <description>Recent content in cache-line on A Developer&#39;s Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Sep 2020 21:30:10 +0900</lastBuildDate><atom:link href="https://seokbeomKim.github.io/tags/cache-line/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>캐시라인(cache-line) 구조 #2</title>
      <link>https://seokbeomKim.github.io/posts/a-structure-of-cacheline/</link>
      <pubDate>Sun, 13 Sep 2020 21:30:10 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/a-structure-of-cacheline/</guid>
      <description>개요 &amp;laquo;코드로 알아보는 ARM 리눅스 커널&amp;raquo;이라는 커널 분석 책으로 스터디를 진행하였다. 예전에 ARM64 아키텍처 부분을 공부한 터라 이해하는 데 문제가 없을 거라 생각했는데 역시나 기억력에 한계가 있었다. 개인적으로는 책의 그림과 내용이 직관적으로 이해가 되지 않고 방해가 방해가 되었다. 나중에 캐시라인의 구조에 대해 분명히 다시 살펴볼 것이므로 아래와 같이 짧게 재 정리해놓고자 한다.
캐시 구조 캐시에 관련된 주요 용어는 아래와 같다.
 태그 캐시라인 인덱스 웨이와 세트  태그 태그는 캐시 탐색 시에 저장되는 메모리 주소의 일부를 만한다.</description>
    </item>
    
    <item>
      <title>캐시 라인(Cache-Line)</title>
      <link>https://seokbeomKim.github.io/posts/cache-line/</link>
      <pubDate>Sat, 25 Apr 2020 14:27:31 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/cache-line/</guid>
      <description>캐시를 꼭 사용해야 하나 SMP 환경에서 일어나는 커널 패닉 문제를 다루다 보면 메모리 배리어를 비롯하여 캐시와 주 메모리 간의 동기화를 다루는 내용이 주를 이룬다. 하지만 매번 간략하게 정리한 문서가 없다보니 기억에 잘 남지도 않고 전체적인 흐름을 읽지 못하는 것 같아 이번 포스팅을 통해서 대략적으로나마 정리하고자 한다.
프로세서 캐시와 메모리의 불일치 문제는 다루기 까다로운 문제이다. 단순하게 프로세서가 싱글 코어라면 문제가 없겠지만 여러 개의 코어를 가지고 있는 프로세서라면 각각의 코어가 가지고 있는 캐시와 주 메모리를 동기화 시켜주어야 한다.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WSL on 범&#39;s 개발 블로그</title>
    <link>https://seokbeomKim.github.io/tags/wsl/</link>
    <description>Recent content in WSL on 범&#39;s 개발 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Feb 2022 17:23:15 +0900</lastBuildDate><atom:link href="https://seokbeomKim.github.io/tags/wsl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WSL2 - VPN 문제 해결하기</title>
      <link>https://seokbeomKim.github.io/posts/wsl2/</link>
      <pubDate>Sat, 12 Feb 2022 17:23:15 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/wsl2/</guid>
      <description>Visual Studio Code의 한계 Yocto와 C언어 기반의 리눅스 커널과 U-Boot 부트로더에서 작업하는 업무 조건에서 Visual studio code의 몇몇 한계가 있었다. 기본으로 제공하는 C/C++ 플러그인의 태깅 기능의 성능이 너무 안좋았고 확장 프로그램들이 사용하는 리소스가 너무 많았다.
우선, 마이크로소프트에서 제공하는 C/C++ 플러그인이 불편하다. 커널과 같이 코드량이 방대한 경우 전체를 파싱하는데 오랜 시간이 걸리기 때문이다. 업무 특성상 여러 개의 SDK를 다뤄야하는데, 매번 받을 때마다 상당한 리소스와 시간이 코드를 파싱하는데 소모되었다. 대체 가능한 플러그인들이 있지만 어느 것도 안정화가 잘 되었다는 느낌을 주지 못했다.</description>
    </item>
    
    <item>
      <title>WSL 가상 디스크 파일 D 드라이브에 옮기기</title>
      <link>https://seokbeomKim.github.io/posts/wsl-move-to-d/</link>
      <pubDate>Wed, 23 Dec 2020 01:00:00 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/wsl-move-to-d/</guid>
      <description>lxrunoffline WSL 을 사용하다 보면 디스크 용량이 커져 C 드라이브의 용량이 부족해진다. 용량이 넉넉하면 문제가 없겠지만 필자와 같이 C 드라이브는 O/S만 설치하고 D 드라이브에 다른 것들을 모두 설치하도록 환경을 설정한 경우에는 이러한 저장 방식은 꽤 부담스러워진다. 예전에는 이러한 문제에 대해 해결 방법이 따로 없었던 것으로 알고 있었는데 찾아보니 lxrunoffline이라는 툴로 간단하게 해결할 수 있었다.
윈도우즈 패키지 매니저인 choco 를 이용하여 lxrunoffline을 설치하고 이를 이용하여 WSL에 사용되는 가상 디스크 파일을 다른 드라이브로 옮길 수 있다.</description>
    </item>
    
    <item>
      <title>WSL 리소스 조정하기</title>
      <link>https://seokbeomKim.github.io/posts/wsl-customize-resource/</link>
      <pubDate>Sat, 28 Nov 2020 23:00:00 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/wsl-customize-resource/</guid>
      <description>개요 커널 분석을 위해 WSL을 이용하도록 환경을 구성하자 서브시스템에서 사용하는 메모리나 CPU 자원이 상당하였다. 16기가 램 중에 무려 12기가를 사용하는 일이 비일비재했다. Vmmem 이라는 프로세스로 엄청난 리소스가 소모되고 있었고 이러한 내용은 다른 블로그에서도 동일하게 재현되고 있었다.
위 블로그에 나와있는 이 문제에 대한 해결법은 간단하다. 아래와 같이 WSL 설정파일을 하나 생성해서 사용할 리소스를 직접 명시해주면 된다.
WSL 리소스 설정 먼저, 실행 중인 WSL을 확인한 후 아래와 같이 종료한다.
PS C:\Windows\system32&amp;gt; wsl -l -v NAME STATE VERSION * Ubuntu Running 2 PS C:\Windows\system32&amp;gt; wsl -t Ubuntu --shutdown PS C:\Windows\system32&amp;gt; PS C:\Windows\system32&amp;gt; wsl -l -v NAME STATE VERSION * Ubuntu Stopped 2 종료한 후에는 아래 경로에 새 파일을 만들어주고 아래와 같이 작성해주자.</description>
    </item>
    
  </channel>
</rss>

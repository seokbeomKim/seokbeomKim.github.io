<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kernel on 코드몽키의 개발 일지</title>
    <link>https://seokbeomKim.github.io/tags/kernel/</link>
    <description>Recent content in kernel on 코드몽키의 개발 일지</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jul 2020 16:25:23 +0900</lastBuildDate>
    
	<atom:link href="https://seokbeomKim.github.io/tags/kernel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>커널에서의 Object-Oriented Design Pattern</title>
      <link>https://seokbeomKim.github.io/posts/oop-in-kernel/</link>
      <pubDate>Sat, 25 Jul 2020 16:25:23 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/oop-in-kernel/</guid>
      <description>개요 현업에서 BSP 코드를 수정하다가 문득 든 생각은 &amp;lsquo;왜 객체 지향의 디자인 패턴을 적용하지 않는 걸까?&amp;rsquo; 라는 것이다. 그러한 디자인 패턴은 이미 오래 전부터 적용되어 왔지만 BSP에 포함된 솔루션 코드로서 추가되는 코드에는 그러한 디자인 패턴이 보이지 않는다.
Java나 C++, 그리고 완전하지는 않지만 prototype을 이용한 Javascript에서도 객체 지향적인 디자인 패턴이 적용되어 있다. 그렇다면, C와 어셈블리어로 짜여진 커널에서는 이러한 디자인 패턴이 어떻게 적용되어 있을까. 여기에 대한 좋은 참고 자료로서 LWN의 한 기사를 찾을 수 있었다.</description>
    </item>
    
    <item>
      <title>맥 OS에서 리눅스 커널 컴파일하기</title>
      <link>https://seokbeomKim.github.io/posts/kernel-compilation-on-mac-os/</link>
      <pubDate>Sun, 12 Jul 2020 22:13:08 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/kernel-compilation-on-mac-os/</guid>
      <description>개요 맥 환경에서 bare-metal이 아닌 리눅스 커널로 컴파일하는 것은 생각했던 것보다 까다롭다. BSD 계열이기는 하지만 커널 컴파일에 필요한 라이브러리와 경로들이 리눅스 환경과 다르기 때문에, 일반적인 리눅스 배포판에서처럼 크로스 컴파일러를 바이너리 형태로 설치한 뒤에 곧바로 커널 빌드를 할 수는 없다.
이 포스팅은 맥에서 리눅스 커널을 빌드하려는 사람들을 위해 작성한 것으로, 아래 구성으로 간략하게 기술하겠다.
 준비 사항 및 제약 사항 크로스 컴파일러 빌드 커널 빌드 끝맺음  본 포스팅에서 확인한 맥 환경은 아래와 같으며 단순 바이너리만 받고자 하는 경우 아래 링크에서 받도록 한다.</description>
    </item>
    
    <item>
      <title>Linux 커널, Busybox 빌드 후 QEMU에서 실행하기(2/2)</title>
      <link>https://seokbeomKim.github.io/posts/build-kernel-and-busybox2/</link>
      <pubDate>Thu, 23 May 2019 15:10:46 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/build-kernel-and-busybox2/</guid>
      <description>지난 번 포스팅에서는 단순하기 initramfs 램디스크를 만들어 busybox에 올리는 방법을 기술했었다. 그러면서 램디스크가 무엇인지 busybox는 무엇인지, 그리고 대략적인 빌드 디렉토리 구조를 파악할 수 있었던 기회였다.
두 번째 포스팅에서는 직접 busybox를 빌드하지 않고 crosstool-ng라는 크로스 컴파일러 생성 스크립트 도구와 buildroot라는 Makefile 패키지를 이용하여 램디스크를 만드는 방법에 대해 기술하겠다.
Crosstool-ng 이용하여 크로스 컴파일러 만들기 crosstool-ng는 미리 설정된 config를 이용해 손쉽게 크로스 컴파일러를 만들 수 있는 패키지이다. 이를 어떻게 이용하는지 자세히 설명하겠다.
먼저 crosstool-ng를 받는다.</description>
    </item>
    
  </channel>
</rss>
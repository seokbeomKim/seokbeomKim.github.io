<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kernel on 범&#39;s 개발 블로그</title>
    <link>https://seokbeomKim.github.io/tags/kernel/</link>
    <description>Recent content in kernel on 범&#39;s 개발 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 May 2022 01:37:45 +0900</lastBuildDate><atom:link href="https://seokbeomKim.github.io/tags/kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Device Tree Overlay</title>
      <link>https://seokbeomKim.github.io/posts/dtbo/</link>
      <pubDate>Sun, 08 May 2022 01:37:45 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/dtbo/</guid>
      <description>Ramoops 덕분에 알게된 오버레이 🔗며칠전 리눅스에서의 Tracing 방법에 대해 공부하다가 찾아낸 세미나 영상에서 ramoops 라는 것을 알게 되었다. ramoops는 커널이 oops/panic 이 발생하면서 warm reset 되었을 경우 재부팅 이후에 pstore (persistent store)을 이용하여 이전에 기록된 dmesg 나 user 콘솔의 기록을 확인할 수 있도록 하는 logger 이다. ramoops 는 cold reset 이 되면 기록이 남아있지 않는다는 단점이 있어 최근에는 ramoops 대신 blk oops/panic logger 를 사용하기도 한다.
이러한 로거를 현업에서 사용하기 위해 사내 평가보드에서 먼저 확인해보았다.</description>
    </item>
    
    <item>
      <title>리눅스 커널 빌드 시 맥 O/S uuid_t 호환성</title>
      <link>https://seokbeomKim.github.io/posts/uuid-compatibility-on-mac-os/</link>
      <pubDate>Thu, 24 Dec 2020 00:56:38 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/uuid-compatibility-on-mac-os/</guid>
      <description>개요 🔗BSD 기반의 맥에서 리눅스 커널 빌드가 안될리 없다고 생각하고 나서 어떻게든 맥에서 리눅스 커널을 빌드하기 위해 이런저런 삽질을 했다. 회사에서의 BSP 업무는 모두 리눅스 환경 아래에서 작업하기 때문에 사실상 큰 의미는 없겠으나, 빌드만을 위해서 맥에서 도커까지 사용해야 하는 솔루션을 납득할 수 없었다.
이에, 지난 포스팅에서 열심히 정리해놓은 가이드를 따라 크로스 컴파일러 준비 후, 커널 빌드를 시도하였으나 어찌된 영문인지 file2alias.c 파일에서 계속해서 빌드 에러가 났다. commit 로그를 뒤져보았는데 uuid_t 관련해서 크게 달라진 점은 없었다.</description>
    </item>
    
    <item>
      <title>커널에서의 Object-Oriented Design Pattern</title>
      <link>https://seokbeomKim.github.io/posts/oop-in-kernel/</link>
      <pubDate>Sat, 25 Jul 2020 16:25:23 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/oop-in-kernel/</guid>
      <description>개요 🔗현업에서 BSP 코드를 수정하다가 문득 든 생각은 &amp;lsquo;왜 객체 지향의 디자인 패턴을 적용하지 않는 걸까?&amp;rsquo; 라는 것이다. 그러한 디자인 패턴은 이미 오래 전부터 적용되어 왔지만 BSP에 포함된 솔루션 코드로서 추가되는 코드에는 그러한 디자인 패턴이 보이지 않는다.
Java나 C++, 그리고 완전하지는 않지만 prototype을 이용한 Javascript에서도 객체 지향적인 디자인 패턴이 적용되어 있다. 그렇다면, C와 어셈블리어로 짜여진 커널에서는 이러한 디자인 패턴이 어떻게 적용되어 있을까. 여기에 대한 좋은 참고 자료로서 LWN의 한 기사를 찾을 수 있었다.</description>
    </item>
    
    <item>
      <title>Linux 커널, Busybox 빌드 후 QEMU에서 실행하기(2/2)</title>
      <link>https://seokbeomKim.github.io/posts/build-kernel-and-busybox2/</link>
      <pubDate>Thu, 23 May 2019 15:10:46 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/build-kernel-and-busybox2/</guid>
      <description>지난 번 포스팅에서는 단순하기 initramfs 램디스크를 만들어 busybox에 올리는 방법을 기술했었다. 그러면서 램디스크가 무엇인지 busybox는 무엇인지, 그리고 대략적인 빌드 디렉토리 구조를 파악할 수 있었던 기회였다.
두 번째 포스팅에서는 직접 busybox를 빌드하지 않고 crosstool-ng라는 크로스 컴파일러 생성 스크립트 도구와 buildroot라는 Makefile 패키지를 이용하여 램디스크를 만드는 방법에 대해 기술하겠다.
Crosstool-ng 이용하여 크로스 컴파일러 만들기 🔗crosstool-ng는 미리 설정된 config를 이용해 손쉽게 크로스 컴파일러를 만들 수 있는 패키지이다. 이를 어떻게 이용하는지 자세히 설명하겠다.
먼저 crosstool-ng를 받는다.</description>
    </item>
    
  </channel>
</rss>

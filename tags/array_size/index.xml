<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ARRAY_SIZE on A Developer&#39;s Note</title>
    <link>https://seokbeomKim.github.io/tags/array_size/</link>
    <description>Recent content in ARRAY_SIZE on A Developer&#39;s Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Mar 2020 00:54:01 +0900</lastBuildDate><atom:link href="https://seokbeomKim.github.io/tags/array_size/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C ARRAY_SIZE 매크로와 포인터 기초</title>
      <link>https://seokbeomKim.github.io/posts/c-arraysize-macro/</link>
      <pubDate>Sat, 28 Mar 2020 00:54:01 +0900</pubDate>
      
      <guid>https://seokbeomKim.github.io/posts/c-arraysize-macro/</guid>
      <description>개요 칩 검증 코드를 수정하기 위해 간단한 루틴을 작성하고 있던 도중 커널에서 제공하는 ARRAY_SIZE 매크로가 의도한대로 동작하지 않아 살펴보기 시작했다. 그러던 도중 https://kldp.org/node/34268과 같은 원인이라는 것을 알게되고 C 기초를 또 다시 한번 공부하게 되었다.
커널에서 사용하는 ARRAY_SIZE는 아래와 같이 구현되어 있다.
#define ARRAY_SIZE(x) (sizeof(x)/sizeof(x[0]))  // examples for (idx = 0; idx &amp;lt; ARRAY_SIZE(pArr); idx++) { // do something }) 본래 의도한대로라면, 배열의 크기만큼 for 구문을 반복해서 수행해야 하지만, pArr 자체가 함수의 인자로써 전달된 것이라면 얘기가 달라진다.</description>
    </item>
    
  </channel>
</rss>
